package BasicHTMLGeneratorParser.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Document__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc5b04c8306054412L, 0x977887c884988a45L, 0x4e1fcda545f5ef3bL, "BasicHTMLGeneratorParser.structure.Document");

  public static final SMethod<String> interpretar_id6UC9bZMDOy = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("interpretar").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6UC9bZMDOy").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(interpretar_id6UC9bZMDOy);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String interpretar_id6UC9bZMDOy(@NotNull SNode __thisNode__) {
    String title = SPropertyOperations.getString(__thisNode__, PROPS.text$1go7);
    String html = "<!DOCTYPE html>\n";
    html = html + "<html lang='en'>";
    html = html + "<head>\n";
    html = html + "<meta charset='UTF-8'>\n";
    html = html + "<meta http-equiv='X-UA-Compatible' content='IE=edge'>\n";
    html = html + "<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n";
    html = html + "<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css'>\n";
    html = html + String.format("<title>%s</title>\n", title);
    html = html + "</head>\n";
    html = html + "<body>\n";
    html = html + Elements__BehaviorDescriptor.interpreter_id6UC9bZMqm$.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.elements$zkwV)) + "\n";
    html = html + "</body>";
    html = html + "</html>";
    return html;
  }

  /*package*/ Document__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) interpretar_id6UC9bZMDOy(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty text$1go7 = MetaAdapterFactory.getProperty(0xc5b04c8306054412L, 0x977887c884988a45L, 0x4e1fcda545f5ef3bL, 0x2c774475217a8f96L, "text");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elements$zkwV = MetaAdapterFactory.getContainmentLink(0xc5b04c8306054412L, 0x977887c884988a45L, 0x4e1fcda545f5ef3bL, 0x4e1fcda545f5ef3dL, "elements");
  }
}
