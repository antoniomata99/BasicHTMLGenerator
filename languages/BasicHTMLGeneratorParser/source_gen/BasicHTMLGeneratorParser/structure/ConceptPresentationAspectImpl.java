package BasicHTMLGeneratorParser.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BotonTag;
  private ConceptPresentation props_BotonsTag;
  private ConceptPresentation props_Color;
  private ConceptPresentation props_Columna;
  private ConceptPresentation props_Componentes;
  private ConceptPresentation props_ContenidoOpcion;
  private ConceptPresentation props_Document;
  private ConceptPresentation props_Element;
  private ConceptPresentation props_ElementBoton;
  private ConceptPresentation props_Elements;
  private ConceptPresentation props_Etiqueta;
  private ConceptPresentation props_EtiquetaTag;
  private ConceptPresentation props_EtiquetasTag;
  private ConceptPresentation props_Formulario;
  private ConceptPresentation props_Opcion;
  private ConceptPresentation props_OpcionSelector;
  private ConceptPresentation props_OpcionsSelector;
  private ConceptPresentation props_SelectorsTag;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BotonTag:
        if (props_BotonTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BotonTag");
          props_BotonTag = cpb.create();
        }
        return props_BotonTag;
      case LanguageConceptSwitch.BotonsTag:
        if (props_BotonsTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BotonsTag");
          props_BotonsTag = cpb.create();
        }
        return props_BotonsTag;
      case LanguageConceptSwitch.Color:
        if (props_Color == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Color");
          props_Color = cpb.create();
        }
        return props_Color;
      case LanguageConceptSwitch.Columna:
        if (props_Columna == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Columna");
          props_Columna = cpb.create();
        }
        return props_Columna;
      case LanguageConceptSwitch.Componentes:
        if (props_Componentes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Componentes");
          props_Componentes = cpb.create();
        }
        return props_Componentes;
      case LanguageConceptSwitch.ContenidoOpcion:
        if (props_ContenidoOpcion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ContenidoOpcion");
          props_ContenidoOpcion = cpb.create();
        }
        return props_ContenidoOpcion;
      case LanguageConceptSwitch.Document:
        if (props_Document == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Document");
          props_Document = cpb.create();
        }
        return props_Document;
      case LanguageConceptSwitch.Element:
        if (props_Element == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Element");
          props_Element = cpb.create();
        }
        return props_Element;
      case LanguageConceptSwitch.ElementBoton:
        if (props_ElementBoton == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ElementBoton");
          props_ElementBoton = cpb.create();
        }
        return props_ElementBoton;
      case LanguageConceptSwitch.Elements:
        if (props_Elements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Elements");
          props_Elements = cpb.create();
        }
        return props_Elements;
      case LanguageConceptSwitch.Etiqueta:
        if (props_Etiqueta == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Etiqueta");
          props_Etiqueta = cpb.create();
        }
        return props_Etiqueta;
      case LanguageConceptSwitch.EtiquetaTag:
        if (props_EtiquetaTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EtiquetaTag");
          props_EtiquetaTag = cpb.create();
        }
        return props_EtiquetaTag;
      case LanguageConceptSwitch.EtiquetasTag:
        if (props_EtiquetasTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EtiquetasTag");
          props_EtiquetasTag = cpb.create();
        }
        return props_EtiquetasTag;
      case LanguageConceptSwitch.Formulario:
        if (props_Formulario == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Formulario");
          props_Formulario = cpb.create();
        }
        return props_Formulario;
      case LanguageConceptSwitch.Opcion:
        if (props_Opcion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Opcion");
          props_Opcion = cpb.create();
        }
        return props_Opcion;
      case LanguageConceptSwitch.OpcionSelector:
        if (props_OpcionSelector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpcionSelector");
          props_OpcionSelector = cpb.create();
        }
        return props_OpcionSelector;
      case LanguageConceptSwitch.OpcionsSelector:
        if (props_OpcionsSelector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OpcionsSelector");
          props_OpcionsSelector = cpb.create();
        }
        return props_OpcionsSelector;
      case LanguageConceptSwitch.SelectorsTag:
        if (props_SelectorsTag == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SelectorsTag");
          props_SelectorsTag = cpb.create();
        }
        return props_SelectorsTag;
    }
    return null;
  }
}
